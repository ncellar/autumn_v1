--------------------------------------------------------------------------------
TODO

CAPTURE SYSTEM
    - check against multiple uses of - accessor

HOOKING
    - make output changes hookable
    - make reset hookable
    - syntax for custom operators ($name?)

GUMPTION
    - insert $ in Java8 (rule-level only) (-> 544)

TODO PLANNING

4 weeks + 1 (try to interleave):

w1: parse tree etc
w2: GUI model
w3: GUI
w4: presentation
w5: manual

TODO FURTHER SMALL

- source: start from 0 or 1; tab as x chars

- path-like getters for parsing expression graphs

- performance
    - store accessor, tag, groups as tabular
    - force captures for changes?
    - tags as linked list

- keep an array instead of a tree in parsestate

- well formedness check (ford: WF -- can't loop without consuming)

- re-allow memoization when dropping precedence in both schemes

- better way to exclude reserved identifiers or warn about them

- scoped memoization

TODO FURTHER BIG

- better error handling
    - "unexpected X" via rounding up token definitions?

- better memo handling
    - memoize tokens?
    - discard children memo when parent finishes

- generalize state handling to be able to define custom state
    - + how memoize can handle custom state, including automatically
      (chained hashs)

- better support for layering with smart tree-building that automatically rewrites trees
  (see D5)

- trees: topological sort

- rewrite GUI in Swing

- mini type system for captures? automatic AST classes generation?

- no state modifiers (no PSF!)

- error handler is sort of like error merge strategy, do it like that instead?

- think about building in validation rules

TODO MUCH LATER

- make dumb expression faster via a backtracking DPDA

- think about how a parser could be retooled to parser html
  (which is lax in syntax) -> need to define bounding boxes

--------------------------------------------------------------------------------