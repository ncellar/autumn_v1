--------------------------------------------------------------------------------
TODO

- DROP

- comment expression code
- make parseDumb take a parser instead of a text and see if making token work with dumb
  and putting much more dumbness in the grammar can improve things
- improve diagnostics ("unexpected X" ?)
- getSeed and setSeed instead of popSeed / pushSeed ?
- left-recursion handling via Resolver / via SingleResolver?
- make dumb expression faster via a backtracking DPDA
- left-recur & expression: why do we need to reset ALL output (including cuts)?

- implement deepcopy for all expressions
- test deepcopy & simplify tests with it

- exprLeftRecursive & exprLeftAssociative ?
- add an expression alternate expression?

- see FeatureTests TODOs

- better grouped capture, they are RETARDED at current

--------------------------------------------------------------------------------
TODO LATER

- rename ParseInput to ParseState
- make config purely descriptive (reusable)
- retool Trace for added flexibility
- retool InstrumentExpression to extract common pattern
- StackTrace as a special case of Trace
- scala/clojure combinators?
- parser generator?
- think about how a parser could be retooled to parser html
  (which is lax in syntax) -> need to define bounding boxes

- remove grouped capture, supply filtering and partitioning operators instead

--------------------------------------------------------------------------------
NOTES

- precedence is an extremely blunt tool: it precludes memoization!
    - it also increases complexity (??)
- overhead of making everything potentially left-recursive
- generator vs interpreter

--------------------------------------------------------------------------------
APPLICATIONS

- graph constraining language
- pcap filtering language

--------------------------------------------------------------------------------
IDEAS (NETWORK)

- FRP to enact real-time changes

- data plane processing
    - composition
    - check safety properties (forwarding, latency bounds)

- active networks (bytecode in packets)

- versioning: transition/hand-over between states
    - ensure some properties during the transition (atomic updates?)

--------------------------------------------------------------------------------
IDEAS (OTHER)

- meta-checking: check that linguistic extensions satisfy properties

--------------------------------------------------------------------------------