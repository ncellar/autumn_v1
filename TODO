--------------------------------------------------------------------------------
TODO

- rework parser configuration

TODO GRAPH

- change LeftRecursionBreaker to modify in place & not record changes & use afterRoot

- shift to a generic & refactored version

- improve documentation

- make parsing expressions immutable ?

-----

- plan for copy construction via slots

- custom walks in nuthatch
    - does it allow things like breadth-first?
        - actually what about "implicit" or lazy trees?
    - use cases, except default one?
        - backward (in general, change order)
        - filtering
        - seem to be no other in the paper, except skipping (not even filtering)

- handle mutations before? (like nuthatch which allows before or after mutations only)

- idea: children as part of GraphVisitor
    - or better, let it manipulate a queue of nodes to process?

- endogenous vs extrageneous
    - nuthatch: tree builders + move actions

- custom slots


- idea
    - change to abstract class, add queue field
    - add expandWalk() method (but can inspect / modify the queue from other methods
        - allow reuse via inheritance

- still to do
    - custom slots
    - extrageneous / copy builders

- open questions
    - enqueue further actions / continuations?
    - multiple visitations?

    must have a relship between children and afterchild / after

    queue of what ???


suspended operation? --> how to create immutable trees ?

TODO GUI

- make it so that the cursor over scrollbars isn't a text cursor
- don't "blue-en" on click, but only on run

TODO SHOULD

- make output changes hookable
- make reset hookable

TODO NICETIES

- automatically tokenize litterals
- improve diagnostics ("unexpected X" ?)
    - round up tokens definitions
- check that named alternates are only used on allow and forbid clauses
- print expressions only with recursion as names
- well formedness check (ford: WF -- can't loop without consuming)
- re-allow memoization when dropping precedence in both schemes

TODO FURTHER

- tree building into the grammar!

TODO UX

- think about entry points
- let user register own passes

--------------------------------------------------------------------------------
TODO PAPER

- cite pure and declarative syntax definition
- cite Left Recursion in Parsing Expression Grammars
- mention semantic actions
- must cite Left Recursion in Parsing Expression Grammars
- mention no memoization inside expressions

--------------------------------------------------------------------------------
TODO MUCH LATER

- make dumb expression faster via a backtracking DPDA
- parser generator?
- think about how a parser could be retooled to parser html
  (which is lax in syntax) -> need to define bounding boxes

OLD IDEAS

- token memo
- unique memo

--------------------------------------------------------------------------------
APPLICATIONS

- graph constraining language
- pcap filtering language

IDEAS (NETWORK)

- FRP to enact real-time changes

- data plane processing
    - composition
    - check safety properties (forwarding, latency bounds)

- active networks (bytecode in packets)

- versioning: transition/hand-over between states
    - ensure some properties during the transition (atomic updates?)

IDEAS (OTHER)

- meta-checking: check that linguistic extensions satisfy properties
- lookup island grammars

--------------------------------------------------------------------------------