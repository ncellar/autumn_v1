// - Originally from Mouse's Java 7 grammar.
// - Escaped stray backslashes in a few locations ([+\-]); as well as unescaped
//   quotes (in char classes in StringLiteral and Escape).
// - Marked a bunch of places as tokens (:=) and removed leading spacing.

//=========================================================================
//  Compilation
//=========================================================================

Compilation
    = CompilationUnit SUB? EOT;

//=========================================================================
//  JLS 3  Lexical Structure
//=========================================================================
//-------------------------------------------------------------------------
//  JLS 3.1-3  Unicode
//-------------------------------------------------------------------------
//  The Unicode escapes in Java source are converted
//  to Java characters by a preprocessor prior to parsing.
//  This is not emulated here; the Unicode escapes are only allowed
//  in string and character literals. They are treated as error in other
//  structures (except comments). The warning in JLS 3.10.5 against using
//  Unicode escapes for line terminators and quotes in string and character
//  literals does not apply here.
//-------------------------------------------------------------------------

//-------------------------------------------------------------------------
//  JLS 3.5  Input Elements and Tokens
//-------------------------------------------------------------------------

SUB = "\u001a" ; // Ctrl + Z
EOT = !_ ;

//-------------------------------------------------------------------------
//  JLS 3.6-7  Spacing
//-------------------------------------------------------------------------

Spacing
    = ( [ \t\r\n\f]+      // WhiteSpace
      / "/*" _ *+ "*/"     // TraditionalComment
      / "//" _ *+ [\r\n]   // EndOfLineComment
      )* ;

//-------------------------------------------------------------------------
//  JLS 3.8  Identifiers
//-------------------------------------------------------------------------

Identifier !:= !Keyword Letter LetterOrDigit* ;

Letter = [a-z] / [A-Z] / [_$] ;

LetterOrDigit = [a-z] / [A-Z] / [0-9] / [_$] ;

// These are traditional definitions of letters and digits.
// JLS defines letters and digits as Unicode characters recognized
// as such by special Java procedures, which is difficult
// to express in terms of Parsing Expressions.

//-------------------------------------------------------------------------
//  JLS 3.9  Keywords
//  More precisely: reserved words. According to JLS, "true", "false",
//  and "null" are technically not keywords - but still must not appear
//  as identifiers. Keywords "const" and "goto" are not used; JLS explains
//  the reason.
//-------------------------------------------------------------------------

Keyword
    = ( "abstract"
      / "assert"
      / "boolean"
      / "break"
      / "byte"
      / "case"
      / "catch"
      / "char"
      / "class"
      / "const"
      / "continue"
      / "default"
      / "double"
      / "do"
      / "else"
      / "enum"
      / "extends"
      / "false"
      / "finally"
      / "final"
      / "float"
      / "for"
      / "goto"
      / "if"
      / "implements"
      / "import"
      / "interface"
      / "int"
      / "instanceof"
      / "long"
      / "native"
      / "new"
      / "null"
      / "package"
      / "private"
      / "protected"
      / "public"
      / "return"
      / "short"
      / "static"
      / "strictfp"
      / "super"
      / "switch"
      / "synchronized"
      / "this"
      / "throws"
      / "throw"
      / "transient"
      / "true"
      / "try"
      / "void"
      / "volatile"
      / "while"
      ) !LetterOrDigit
    ;

ABSTRACT     !:= "abstract"     !LetterOrDigit  ;
ASSERT       !:= "assert"       !LetterOrDigit  ;
BOOLEAN      !:= "boolean"      !LetterOrDigit  ;
BREAK        !:= "break"        !LetterOrDigit  ;
BYTE         !:= "byte"         !LetterOrDigit  ;
CASE         !:= "case"         !LetterOrDigit  ;
CATCH        !:= "catch"        !LetterOrDigit  ;
CHAR         !:= "char"         !LetterOrDigit  ;
CLASS        !:= "class"        !LetterOrDigit  ;
CONTINUE     !:= "continue"     !LetterOrDigit  ;
DEFAULT      !:= "default"      !LetterOrDigit  ;
DOUBLE       !:= "double"       !LetterOrDigit  ;
DO           !:= "do"           !LetterOrDigit  ;
ELSE         !:= "else"         !LetterOrDigit  ;
ENUM         !:= "enum"         !LetterOrDigit  ;
EXTENDS      !:= "extends"      !LetterOrDigit  ;
FALSE        !:= "false"        !LetterOrDigit  ;
FINALLY      !:= "finally"      !LetterOrDigit  ;
FINAL        !:= "final"        !LetterOrDigit  ;
FLOAT        !:= "float"        !LetterOrDigit  ;
FOR          !:= "for"          !LetterOrDigit  ;
IF           !:= "if"           !LetterOrDigit  ;
IMPLEMENTS   !:= "implements"   !LetterOrDigit  ;
IMPORT       !:= "import"       !LetterOrDigit  ;
INTERFACE    !:= "interface"    !LetterOrDigit  ;
INT          !:= "int"          !LetterOrDigit  ;
INSTANCEOF   !:= "instanceof"   !LetterOrDigit  ;
LONG         !:= "long"         !LetterOrDigit  ;
NATIVE       !:= "native"       !LetterOrDigit  ;
NEW          !:= "new"          !LetterOrDigit  ;
NULL         !:= "null"         !LetterOrDigit  ;
PACKAGE      !:= "package"      !LetterOrDigit  ;
PRIVATE      !:= "private"      !LetterOrDigit  ;
PROTECTED    !:= "protected"    !LetterOrDigit  ;
PUBLIC       !:= "public"       !LetterOrDigit  ;
RETURN       !:= "return"       !LetterOrDigit  ;
SHORT        !:= "short"        !LetterOrDigit  ;
STATIC       !:= "static"       !LetterOrDigit  ;
STRICTFP     !:= "strictfp"     !LetterOrDigit  ;
SUPER        !:= "super"        !LetterOrDigit  ;
SWITCH       !:= "switch"       !LetterOrDigit  ;
SYNCHRONIZED !:= "synchronized" !LetterOrDigit  ;
THIS         !:= "this"         !LetterOrDigit  ;
THROWS       !:= "throws"       !LetterOrDigit  ;
THROW        !:= "throw"        !LetterOrDigit  ;
TRANSIENT    !:= "transient"    !LetterOrDigit  ;
TRUE         !:= "true"         !LetterOrDigit  ;
TRY          !:= "try"          !LetterOrDigit  ;
VOID         !:= "void"         !LetterOrDigit  ;
VOLATILE     !:= "volatile"     !LetterOrDigit  ;
WHILE        !:= "while"        !LetterOrDigit  ;

//-------------------------------------------------------------------------
//  JLS 3.10  Literals
//-------------------------------------------------------------------------

Literal
    = FloatLiteral      : floatLiteral
    / IntegerLiteral    : integerLiteral    // May be a prefix of FloatLiteral
    / BooleanLiteral    : booleanLiteral
    / CharLiteral       : charLiteral
    / StringLiteral     : stringLiteral
    / NullLiteral       : nullLiteral
    ;

//-------------------------------------------------------------------------
//  JLS 3.10.1  Integer Literals
//-------------------------------------------------------------------------

IntegerLiteral
    !:= ( HexNumeral
      / BinaryNumeral
      / OctalNumeral            // May be a prefix of HexNumeral or BinaryNumeral
      / DecimalNumeral          // May be a prefix of OctalNumeral
      ) [lL]?
    ;

DecimalNumeral
    = "0"
    / [1-9]([_]*[0-9])*
    ;

HexNumeral
    = ("0x" / "0X") HexDigits ;

OctalNumeral
    = "0" ([_]*[0-7])+ ;

BinaryNumeral
    = ("0b" / "0B") [01]([_]*[01])* ;

//-------------------------------------------------------------------------
//  JLS 3.10.2  Floatng-point Literals
//-------------------------------------------------------------------------

FloatLiteral
    !:= ( HexadecimalFloatingPointLiteral
      / DecimalFloatingPointLiteral   // May be a prefix of above
      )
    ;

DecimalFloatingPointLiteral
    = Digits "." Digits?  Exponent? [fFdD]?
    / "." Digits Exponent? [fFdD]?
    / Digits Exponent [fFdD]?
    / Digits Exponent? [fFdD]
    ;

Exponent
    = [eE] [+\\-]? Digits ;

HexadecimalFloatingPointLiteral
    = HexSignificand BinaryExponent [fFdD]? ;

HexSignificand
    = ("0x" / "0X") HexDigits? "." HexDigits
    / HexNumeral "."?                           // May be a prefix of above
    ;

HexDigits
    = HexDigit ([_]*HexDigit)* ;

HexDigit
    = [a-f] / [A-F] / [0-9] ;

BinaryExponent
    = [pP] [+\\-]? Digits ;

Digits
    = [0-9]([_]*[0-9])* ;

//-------------------------------------------------------------------------
//  JLS 3.10.3  Boolean Literals
//-------------------------------------------------------------------------

BooleanLiteral
    = TRUE
    / FALSE
    ;

//-------------------------------------------------------------------------
//  JLS 3.10.4  Character Literals
//-------------------------------------------------------------------------

CharLiteral
    !:= "'" (Escape / !['\\\n\r] _) "'"
    ;

//-------------------------------------------------------------------------
//  JLS 3.10.5 String Literals
//-------------------------------------------------------------------------

StringLiteral
    !:= "\"" (Escape / ![\"\\\n\r] _)* "\""
    ;

Escape
    = "\\" ([btnfr\"'\\] / OctalEscape / UnicodeEscape)
    ;

OctalEscape
    = [0-3][0-7][0-7]
    / [0-7][0-7]
    / [0-7]
    ;

UnicodeEscape
    = "u"+ HexDigit HexDigit HexDigit HexDigit ;

//-------------------------------------------------------------------------
//  JLS 3.10.6 The Null literal
//-------------------------------------------------------------------------

NullLiteral = NULL ;

//-------------------------------------------------------------------------
//  JLS 3.11  Separators
//-------------------------------------------------------------------------

'@'    :=   "@"        ;
'::'   :=   "::"       ;
','    :=   ","        ;
'.'    :=   "."        ;
'...'  :=   "..."      ;
'('    :=   "("        ;
'['    :=   "["        ;
']'    :=   "]"        ;
')'    :=   ")"        ;
'{'    :=   "{"        ;
'}'    :=   "}"        ;
';'    :=   ";"        ;

//-------------------------------------------------------------------------
//  JLS 3.12  Operators
//  The operators < and > is defined uder two names:
//  LT and GT, respectively LPOINT and RPOINT.
//  The last two are used in the type context, to emulate the translation
//  rule given in JLS 3.2.
//-------------------------------------------------------------------------

AND             :=   "&" ![=&]   ;
ANDAND          :=   "&&"        ;
ANDEQU          :=   "&="        ;
ARROW           :=   "->"        ;
BANG            :=   "!" ![=]    ;
BSR             :=   ">>>" ![=]  ;
BSREQU          :=   ">>>="      ;
COLON           :=   ":" ![:]    ;
DEC             :=   "--"        ;
DIV             :=   "/" ![=]    ;
DIVEQU          :=   "/="        ;
EQU             :=   "=" ![=]    ;
EQUAL           :=   "=="        ;
GE              :=   ">="        ;
GT              :=   ">" ![=>]   ;
HAT             :=   "^" ![=]    ;
HATEQU          :=   "^="        ;
INC             :=   "++"        ;
LE              :=   "<="        ;
LPOINT          :=   "<"         ;
LT              :=   "<" ![=<]   ;
MINUS           :=   "-" ![=\->] ;
MINUSEQU        :=   "-="        ;
MOD             :=   "%" ![=]    ;
MODEQU          :=   "%="        ;
NOTEQUAL        :=   "!="        ;
OR              :=   "|" ![=|]   ;
OREQU           :=   "|="        ;
OROR            :=   "||"        ;
PLUS            :=   "+" ![=+]   ;
PLUSEQU         :=   "+="        ;
QUERY           :=   "?"         ;
RPOINT          :=   ">"         ;
SL              :=   "<<" ![=]   ;
SLEQU           :=   "<<="       ;
SR              :=   ">>" ![=>]  ;
SREQU           :=   ">>="       ;
STAR            :=   "*" ![=]    ;
STAREQU         :=   "*="        ;
TILDE           :=   "~"         ;

//=========================================================================
//  JLS 4  Types, Values and Variables
//=========================================================================
//-------------------------------------------------------------------------
//  JLS 4.2  Primitive Types and Values
//-------------------------------------------------------------------------

/*

basicType (+)

primitiveType
    <basicType>
    <annotations>
*/

BasicType
    = (
      BYTE
    / SHORT
    / INT
    / LONG
    / CHAR
    / FLOAT
    / DOUBLE
    / BOOLEAN
    ) :+ basicType
    ;

PrimitiveType
    = (Annotations BasicType):primitiveType ;

//-------------------------------------------------------------------------
//  JLS 4.3  Reference Types and Values
//-------------------------------------------------------------------------

/*

referenceType
    OR
        <primitiveType>
        <classType>
    <dims>

classType
    <annotations>
    id (+)
    <typeArgs>

dims (*)
    <annotations>

stemType
    <primitiveType>
    <classType>

typeVariable
    <annotations>
    id (+)

type
    OR
        <primitiveType>
        <classType>
    <dims>

exceptionType
    OR
        <classType>
        <typeVariable>

*/

ReferenceType
    = (
      PrimitiveType DimsAlo
    / ClassType     Dims
    ):referenceType
    ;

ClassType
    = ((Annotations Identifier:+id TypeArguments?) :* components ,+ '.'):classType ;

StemType
    = (
      PrimitiveType
    / ClassType
    ):stemType
    ;

Type
    = (( PrimitiveType / ClassType ) Dims):type ;

TypeVariable
    = (Annotations Identifier:+id):typeVariable ;

Dim
    = Annotations '[' ']' ;

Dims
    = Dim :* dims * ;

DimsAlo
    = Dim :* dims + ;

ExceptionType
    = (ClassType / TypeVariable):exceptionType ;

//-------------------------------------------------------------------------
//  JLS 4.4  Type Variables
//-------------------------------------------------------------------------

/*

typeParameter
    <annotations>
    id (+)
    OR?
        boundTypes (#)
            <classType>
        <typeVariable>

*/

TypeParameter
    = (Annotations Identifier:+id TypeBound?):typeParameter ;

TypeBound
    = EXTENDS ((ClassType :# boundTypes) ,+ AND / TypeVariable) ;

//-------------------------------------------------------------------------
//  JLS 4.5  Parametrized Types
//-------------------------------------------------------------------------

/*

typeArgs (#)
    <wildcard>
    <referenceType>

wildcard
    <annotations>
    OR?
        extends
            <referenceType>
        super
            <referenceType>

*/

TypeArguments
    = LPOINT TypeArgument:#typeArgs ,+ ',' RPOINT ;

TypeArgument
    = ReferenceType
    / Wildcard
    ;

Wildcard
    = (Annotations QUERY WildcardBounds?):wildcard ;

WildcardBounds
    = EXTENDS ReferenceType:extends
    / SUPER ReferenceType:super
    ;

//=========================================================================
//  JLS 6  Names
//=========================================================================

QualIdent
    = Identifier ,+ '.';

//=========================================================================
//  JLS 7  Packages
//=========================================================================
//-------------------------------------------------------------------------
//  JLS 7.3  Compilation Units
//-------------------------------------------------------------------------

/*

<root>
    <package>
    imports (#)
        <import>
    types (*)
        <typeDeclaration>

*/

CompilationUnit
    = PackageDeclaration? (ImportDeclaration :# imports)* (TypeDeclaration :* types)* ;

//-------------------------------------------------------------------------
//  JLS 7.4  Package Declarations
//-------------------------------------------------------------------------

/*

package
    <annotations>
    name (+)

*/

PackageDeclaration
    = (Annotations PACKAGE QualIdent:+name):package ';' ;

//-------------------------------------------------------------------------
//  JLS 7.5  Import Declarations
//-------------------------------------------------------------------------

/*

import
    static (?)
    id (+)
    star (?)

*/

ImportDeclaration
    = (IMPORT STATIC:static? QualIdent:+id ('.' STAR:star)?):import ';'
    / ';'
    ;

//-------------------------------------------------------------------------
//  JLS 7.6  Top Level Type Declarations
//-------------------------------------------------------------------------

/*

TODO

*/

TypeDeclaration
    = ClassDeclaration
    / InterfaceDeclaration
    / ';'
    ;

//=========================================================================
//  JLS 8  Classes
//=========================================================================
//-------------------------------------------------------------------------
//  JLS 8.1  Class Declarations
//-------------------------------------------------------------------------

/*

note: interfaces can't be final

<typeModifiers>
    modifiers (#)
        <annotation>
        public
        protected
        private
        abstract
        static
        final
        strictfp

typeParameters (#)
    <typeParameter>

TODO

classDeclaration
    <typeModifiers>
    class
    id
    <typeParameters>
    superclass (?)
        <classType>
    superInterfaces (#)
        <classType>
    body (#)
        TODO

*/

ClassDeclaration
    = NormalClassDeclaration
    / EnumDeclaration
    ;

NormalClassDeclaration
    = TypeModifiers
      CLASS:class
      Identifier:+id
      TypeParameters?
      Superclass?
      (IMPLEMENTS InterfaceTypeList)?
      ClassBody
    ;

TypeModifiers
    = (
      Annotation
    / PUBLIC:public
    / PROTECTED:protected
    / PRIVATE:private
    / ABSTRACT:abstract
    / STATIC:static
    / FINAL:final
    / STRICTFP:strictfp
    ) :# modifiers *
    ;

TypeParameters
    = LPOINT TypeParameterList RPOINT ;

TypeParameterList
    = TypeParameter :# typeParameters ,+ ',' ;

Superclass
    = EXTENDS ClassType:superclass ;

InterfaceTypeList
    = (ClassType ,+ ',') :# superInterfaces ;

ClassBody
    = '{' ClassBodyDeclaration* '}' ;

// NOTE: interface have severe restrictions on these!
//       methods (ofc), visibility, everything implicitly static, sometimes final, etc

// NOTE: idem for annotation types (only constant fields + element)
//       of course elements are only valid for

ClassBodyDeclaration
    = FieldDeclaration
    / MethodDeclaration
    / ClassDeclaration
    / InterfaceDeclaration
    / AnnotationTypeElementDeclaration

    /** end members, start other declarations **/

    / Block
    / STATIC Block
    / ConstructorDeclaration
    / ';'
    ;

//-------------------------------------------------------------------------
//  JLS 8.9  Enum Types
//-------------------------------------------------------------------------

/*

TODO

enumDeclaration
    <typeModifiers>
    enum
    id
    superInterfaces (#)
        <classType>
    enumConstants (*)
        <annotations>
        id
        <arguments>
    body (#)
        TODO

TODO arguments

*/

EnumDeclaration
    = TypeModifiers
      ENUM:enum
      Identifier:+id
      (IMPLEMENTS InterfaceTypeList)?
      '{'
      (EnumConstant :* enumConstants) , ',' ','?
      (';' ClassBodyDeclaration*)?
      '}' ;

EnumConstant
    = Annotations Identifier:+id Arguments? ClassBody? ;

//-------------------------------------------------------------------------
//  JLS 8.3  Field Declarations
//-------------------------------------------------------------------------

/*

<fieldModifiers>
    modifiers (#)
        <annotation>
        public
        protected
        private
        static
        final
        transient
        volatile

fieldDeclaration
    <fieldModifiers>
    <type>
    <declarators>

declarators (#)
    <declarator>

declarator
    <declaratorId>
    TODO

declaratorId
    id
    <dims>

*/

FieldDeclaration
    = FieldModifiers Type VariableDeclaratorList ';' ;

VariableDeclaratorList
    = (VariableDeclarator :# declarators) ,+ ',' ;

VariableDeclarator
    = (VariableDeclaratorId (EQU VariableInitializer)?):declarator ;

VariableDeclaratorId
    = (Identifier:+id Dims):declaratorId ;

// TODO

VariableInitializer
    = Expression
    / ArrayInitializer
    ;

FieldModifiers
    = (
      Annotation
    / PUBLIC:public
    / PROTECTED:protected
    / PRIVATE:private
    / STATIC:static
    / FINAL:final
    / TRANSIENT:transient
    / VOLATILE:volatile
    ) :# modifiers *
    ;

UnannClassType
    = Identifier TypeArguments?
          ('.' Annotation* Identifier TypeArguments?)*  ;

UnannType
    = BasicType Dim*
    / UnannClassType Dim*
    ;

//-------------------------------------------------------------------------
//  JLS 8.4  Method Declarations
//-------------------------------------------------------------------------

/*

<variableModifiers>
    modifiers (#)
        <annotation>
        final

<methodModifiers>
    modifiers (#)
        <annotation>
        pulibc
        protected
        private
        abstract
        static
        final
        synchronized
        native
        strictfp

<return>
    OR
        <type>
        void

methodDeclaration
    <methodModifiers>
    <return>
    id (+)
    <parameters>
    <dims>

parameters (*)
    <variableModifiers>
    <type>
    <annotations> (?)
    ellipsis (?)
    <declaratorId>
    <exceptions> (?)
    <methodBody>

exceptions (#)
    <exceptionType>

// TODO methodBody

*/

MethodDeclaration
    = MethodModifiers
      TypeParameters?
      (Type / VOID:void)
      Identifier:+id
      FormalParameters
      Dims
      Throws?
      MethodBody ;

// NOTE this does not separate the receiver parameter (where the first param is this; or Type.this
//      where Type is the type of this class / nested class (e.g. pkg.Outer.Inner.this)

// NOTE variadic parameter are only allowed as last parameter!

FormalParameters
    = '(' (FormalParameter :* parameters) , ',' ')' ;

FormalParameter
    = VariableModifiers Type VariableDeclaratorId
    / VariableModifiers Type Annotations '...':ellipsis VariableDeclaratorId !','
    ;

VariableModifiers
    = ( Annotation / FINAL ) :# modifiers * ;

// NOTE: only interface methods can be default (and must be, to have a body)

MethodModifiers
    = (
      Annotation
    / PUBLIC:public
    / PROTECTED:protected
    / PRIVATE:private
    / ABSTRACT:abstract
    / STATIC:static
    / FINAL:final
    / SYNCHRONIZED:synchronized
    / NATIVE:native
    / STRICTFP:strictfp
    / DEFAULT:default
    ) :# modifiers *
    ;

Throws
    = THROWS ExceptionType :# exceptions ,+ ',' ;

MethodBody
    = Block / ';' ;

//-------------------------------------------------------------------------
//  JLS 8.8  Constructor Declarations
//-------------------------------------------------------------------------

ConstructorDeclaration
    = ConstructorModifier* ConstructorDeclarator Throws? ConstructorBody ;

ConstructorDeclarator
    = TypeParameters? Identifier FormalParameters ;

ConstructorModifier
    = Annotation
    / PUBLIC
    / PROTECTED
    / PRIVATE
    ;

ConstructorBody
    = '{' ExplicitConstructorInvocation? BlockStatements? '}' ;

ExplicitConstructorInvocation
    = TypeArguments? THIS Arguments ';'
    / TypeArguments? SUPER Arguments ';'

    // http://stackoverflow.com/questions/2831484

    / Expression '.' TypeArguments? SUPER Arguments ';'
    ;

//=========================================================================
//  JLS 9  Interfaces
//=========================================================================
//-------------------------------------------------------------------------
//  JLS 9.1  Interface Declarations
//-------------------------------------------------------------------------

/*

TODO

interfaceDeclaration
    <typeModifiers>
    interface
    id
    <typeParameters>
    superInterfaces (#)
        <classType>
    body (#)
        TODO

*/

InterfaceDeclaration
    = NormalInterfaceDeclaration
    / AnnotationTypeDeclaration
    ;

NormalInterfaceDeclaration
    = TypeModifiers
      INTERFACE:interface
      Identifier:+id
      TypeParameters?
      (EXTENDS InterfaceTypeList)?
      ClassBody ;

//-------------------------------------------------------------------------
//  JLS 9.6  Annotation types
//-------------------------------------------------------------------------

AnnotationTypeDeclaration
    = TypeModifiers '@' INTERFACE Identifier:+id ClassBody ;

AnnotationTypeElementDeclaration
    = AnnotationTypeElementModifiers Type Identifier '(' ')' Dims
         (DEFAULT ElementValue)? ';' ;

 AnnotationTypeElementModifiers
     = (
       Annotation
     / PUBLIC:public
     / ABSTRACT:abstract
     ) :# modifiers *
     ;

//-------------------------------------------------------------------------
//  JLS 9.7  Annotations
//-------------------------------------------------------------------------

/*

annotations (#)
    annotation

annotation
    id (+)
    ?OR
        pairs (*)
            id (+)
            <value>
        value
            <value>

<value>
    OR
        annotation
        expression
        values (*)
*/

Annotations
    = Annotation :# annotations * ;

Annotation
    = '@'
      ( NormalAnnotation
      / SingleElementAnnotation
      / MarkerAnnotation
      ):annotation
    ;

NormalAnnotation
    = QualIdent:+id '(' ElementValuePairList ')' ;

ElementValuePairList
    = ElementValuePair :* pairs (',' ElementValuePair :* pairs)* ;

// TODO do we capture expression as expression always?

ElementValuePair
    = Identifier:+id EQU ElementValue ;

ElementValue
    = (Expression forbid { assign }):expression
    / ElementValueArrayInitializer
    / Annotation
    ;

ElementValueArrayInitializer
    = '{' ElementValueList? ','? '}' ;

ElementValueList
    = ElementValue :* values  (',' ElementValue :* values)* ;

MarkerAnnotation
    = QualIdent:+id ;

SingleElementAnnotation
    = QualIdent:+id '(' ElementValue:value ')' ;


//=========================================================================
//  JLS 10  Arrays
//=========================================================================
//-------------------------------------------------------------------------
//  JLS 10.6  Array Initializers
//-------------------------------------------------------------------------

/*

elementInitializers (#)
    TODO

*/

ArrayInitializer
    = '{' (VariableInitializer :# elementInitializers) , ',' ','? '}' ;

//=========================================================================
//  JLS 14  Blocks and Statements
//=========================================================================
//-------------------------------------------------------------------------
//  JLS 14.2 Blocks
//-------------------------------------------------------------------------

Block
    = '{' BlockStatements? '}' ;

BlockStatements
    = BlockStatement BlockStatement* ;

BlockStatement
    = LocalVariableDeclarationStatement
    / ClassDeclaration
    / Statement
    ;

//-------------------------------------------------------------------------
//  JLS 14.4  Local Variable Declaration Statements
//-------------------------------------------------------------------------

LocalVariableDeclarationStatement
    = LocalVariableDeclaration ';' ;

LocalVariableDeclaration
    = VariableModifiers UnannType VariableDeclaratorList ;

//-------------------------------------------------------------------------
//  JLS 14.5  Statements
//-------------------------------------------------------------------------

Statement
    = Block
    / IF ParExpression Statement (ELSE Statement)?
    / BasicForStatement
    / EnhancedForStatement
    / WHILE ParExpression Statement
    / DO Statement WHILE ParExpression ';'
    / TryStatement
    / SWITCH ParExpression SwitchBlock
    / SYNCHRONIZED ParExpression Block
    / RETURN Expression? ';'
    / THROW Expression ';'
    / BREAK Identifier? ';'
    / CONTINUE Identifier? ';'
    / ASSERT Expression (COLON Expression)? ';'
    / ';'
    / StatementExpression ';'
    / Identifier COLON Statement
    ;

ParExpression
    = '(' Expression ')' ;

//-------------------------------------------------------------------------
//  JLS 14.11  The SWITCH Statement
//-------------------------------------------------------------------------

SwitchBlock
    = '{' SwitchBlockStatementGroup* SwitchLabel* '}' ;

SwitchBlockStatementGroup
    = SwitchLabels BlockStatements ;

SwitchLabels
    = SwitchLabel SwitchLabel* ;

SwitchLabel
    = CASE (Expression / EnumConstantName) COLON
    / DEFAULT COLON
    ;

EnumConstantName
    = Identifier ;

//-------------------------------------------------------------------------
//  JLS 14.14  The FOR Statement
//-------------------------------------------------------------------------

BasicForStatement
    = FOR '(' ForInit? ';' Expression? ';' ForUpdate? ')' Statement ;

ForInit
    = LocalVariableDeclaration
    / StatementExpressionList
    ;

ForUpdate
    = StatementExpressionList ;

StatementExpressionList
    = StatementExpression (','  StatementExpression)* ;

EnhancedForStatement
    = FOR '(' VariableModifiers UnannType VariableDeclaratorId COLON
          Expression ')' Statement ;

//-------------------------------------------------------------------------
//  JLS 14.20  The TRY Statement
//-------------------------------------------------------------------------

TryStatement
    = TRY
      ( Block (CatchClause* Finally / CatchClause+)
      / ResourceSpecification Block CatchClause* Finally?
      )
    ;

CatchClause
    = CATCH '(' CatchFormalParameter ')' Block ;

CatchFormalParameter
    = VariableModifiers CatchType VariableDeclaratorId ;

CatchType
    = UnannClassType (OR ClassType)* ;

Finally
    = FINALLY Block ;

ResourceSpecification
    = '(' ResourceList ';'? ')' ;

ResourceList
    = Resource (';' Resource)* ;

Resource
    = VariableModifiers UnannType VariableDeclaratorId EQU Expression ;


//=========================================================================
//  JLS 15  Expressions
//=========================================================================

//-------------------------------------------------------------------------
//  JLS 15.9  Class Instance Creation Expressions
//-------------------------------------------------------------------------

/*

<classCreator>
    <typeArgs> (?)
    <annotations>
    <arguments>
    components (*)
        <annotations>
        id (+)
        OR ?
            <typeArgs>
            diamond
    <classBody>

TODO (classBody)

*/

ClassCreator
    = TypeArguments? Annotations ClassTypeWithDiamond Arguments ClassBody? ;

ClassTypeWithDiamond
    = ((Annotations Identifier:+id TypeArgumentsOrDiamond?) :* components) ,+ '.' ;

TypeArgumentsOrDiamond
    = TypeArguments
    / (LPOINT RPOINT !'.'):diamond  // Must be last
    ;

//-------------------------------------------------------------------------
//  JLS 15.10  Array Creation and Access Expressions
//-------------------------------------------------------------------------

/*

<arrayCreator>
    <stemType>
    dimExprs (*) (?)
        <annotations>
        1 [dimExpr]
    <dims>
    <arrayInitializer>

TODO (arrayInitializer)

*/

// NOTE: arrays with an initializer cannot have dimension expressions

ArrayCreator
    = StemType DimExpr :* dimExprs + Dims
    / StemType DimsAlo ArrayInitializer
    ;

DimExpr
    = Annotations '[' Expression ']' ;

//-------------------------------------------------------------------------
//  JLS 15.12  Method Invocation Expressions
//-------------------------------------------------------------------------

/*

arguments (#)
    <expression>

*/

Arguments
    = '(' (Expression :# arguments) , ',' ')' ;

//-------------------------------------------------------------------------
//  JLS 15.27  Lambda Expressions
//-------------------------------------------------------------------------

/*

lambda
    OR
        id (+)
        <parameters>
        inferredParameters (*+)
    lambdaBody
        OR
            <expression>
            <block>

TODO (expression block) (parameters)

*/

LambdaExpression
    = (LambdaParameters ARROW (Expression / Block):lambdaBody) : lambda ;

LambdaParameters
    = Identifier:+id
    / FormalParameters
    / '(' (Identifier :+* inferredParameters) ,+ ',' ')'
    ;

// ===============================================================================

Expression = expr

    -> Assignment               @+ @left_recur @assign
    -> LambdaExpression         @=
    -> ConditionalExpression    @+ @left_recur

    // BINARY OPERATORS

    -> OrOr                     @+ @left_assoc
    -> AndAnd                   @+ @left_assoc
    -> Or                       @+ @left_assoc
    -> Hat                      @+ @left_assoc
    -> And                      @+ @left_assoc

    -> Equal                    @+ @left_assoc
    -> NotEqual                 @=

    -> Le                       @+ @left_assoc
    -> Ge                       @=
    -> Lt                       @=
    -> Gt                       @=
    -> InstanceOf               @=

    -> Sl                       @+ @left_assoc
    -> Sr                       @=
    -> Bsr                      @=

    -> Plus                     @+ @left_assoc
    -> Minus                    @=

    -> Star                     @+ @left_assoc
    -> Div                      @=
    -> Mod                      @=

    // PREFIX OPERATORS

    -> BInc                     @+ @binc
    -> BDec                     @= @bdec
    -> UPlus                    @=
    -> UMinus                   @=
    -> Tilde                    @=
    -> Bang                     @=
    -> CastExpression           @= // does not conflict with (expr)(arguments) because lower precedence

    // POSTFIX EXPRESSIONS

    -> AInc                     @+ @left_assoc @ainc
    -> ADec                     @= @adec
    -> DotTypeArgs              @= @tmcall
    -> Call                     @= @mcall
    -> DotIden                  @= @dot_iden
    -> DotNew                   @=
    -> DotThis                  @=
    -> DotSuper                 @=
    -> DotClass                 @=
    -> ArrayAccess              @= @array_access
    -> MethodRef                @=
    -> NewRef                   @=

    // POSTFIX TYPES

    -> TypeWithArgs             @=
    -> ArrayType                @=

    // PRIMARY EXPRESSIONS

    -> '(' drop Expression ')'  @+
    -> ThisCall                 @=
    -> THIS:this                @=
    -> SuperCall                @=
    -> SUPER:super              @=
    -> CtorCall                 @= @ccall
    -> ArrayCtorCall            @=
    -> Identifier : identifier  @= @iden
    -> Literal                  @=

    // PRIMARY TYPES

    -> BasicType    @=
    -> VOID:void    @=
    ;

// ===============================================================================

/*

assignment
    <expression>
    op (+)
    <expression>

*/

Assignment
    = (LValue AssignmentOperator:+op Expression):assignment ;

LValue
    = Expression allow { iden, dot_iden, array_access } ;

AssignmentOperator
    = EQU
    / STAREQU
    / DIVEQU
    / MODEQU
    / PLUSEQU
    / MINUSEQU
    / SLEQU
    / SREQU
    / BSREQU
    / ANDEQU
    / HATEQU
    / OREQU
    ;


/*

conditionalExpr
    <expression>
    <expression>
    <expression>

*/

ConditionalExpression
    = (Expression QUERY drop Expression COLON Expression):conditionalExpr ;


/*

TODO

*/

OrOr        = (Expression OROR          Expression) : oror          ;
AndAnd      = (Expression ANDAND        Expression) : andand        ;
Or          = (Expression OR            Expression) : or            ;
Hat         = (Expression HAT           Expression) : hat           ;
And         = (Expression AND           Expression) : and           ;

Equal       = (Expression EQUAL         Expression) : equal         ;
NotEqual    = (Expression NOTEQUAL      Expression) : notEqual      ;

Le          = (Expression LE            Expression) : le            ;
Ge          = (Expression GE            Expression) : ge            ;
Lt          = (Expression LT            Expression) : lt            ;
Gt          = (Expression GT            Expression) : gt            ;
InstanceOf  = (Expression INSTANCEOF    Expression) : instanceof    ;

Sl          = (Expression SL            Expression) : sl            ;
Sr          = (Expression SR            Expression) : sr            ;
Bsr         = (Expression BSR           Expression) : bsr           ;

Plus        = (Expression PLUS          Expression) : plus          ;
Minus       = (Expression MINUS         Expression) : minus         ;

Star        = (Expression STAR          Expression) : star          ;
Div         = (Expression DIV           Expression) : div           ;
Mod         = (Expression MOD           Expression) : mod           ;

BInc        = (INC      Expression) : bInc      ;
BDec        = (DEC      Expression) : bDec      ;
UPlus       = (PLUS     Expression) : uPlus     ;
UMinus      = (MINUS    Expression) : uMinus    ;
Tilde       = (TILDE    Expression) : tilde     ;
Bang        = (BANG     Expression) : bang      ;

AInc        = (Expression INC                                           ) : aInc        ;
ADec        = (Expression DEC                                           ) : aDec        ;
DotTypeArgs = (Expression '.' TypeArguments Identifier drop Arguments   ) : dotTypeArgs ;
Call        = (Expression drop Arguments                                ) : call        ;
DotIden     = (Expression '.' Identifier                                ) : dotIden     ;
DotNew      = (Expression '.' NEW drop ClassCreator                     ) : dotNew      ;
DotThis     = (Expression '.' THIS                                      ) : dotThis     ;
DotSuper    = (Expression '.' SUPER                                     ) : dotSuper    ;
DotClass    = (Expression '.' CLASS                                     ) : dotClass    ;
ArrayAccess = (Expression '[' drop Expression ']'                       ) : arrayAccess ;
MethodRef   = (Expression '::' TypeArguments? Identifier                ) : methodRef   ;
NewRef      = (Expression '::' TypeArguments? NEW                       ) : newRef      ;

TypeWithArgs = (Expression TypeArguments    ) : typeWithArgs    ;
ArrayType    = (Expression '[' ']'          ) : arrayTYpe       ;

ThisCall        = (THIS  Arguments          ) : thisCall        ;
SuperCall       = (SUPER Arguments          ) : superCall       ;
CtorCall        = (NEW drop ClassCreator    ) : ctorCall        ;
ArrayCtorCall   = (NEW drop ArrayCreator    ) : arrayCtorCall   ;

// ===============================================================================

/*

assignment
    0 [lvalue]
    op (+)
    2 [right-hand side]

cast
    types (#)
        <type>
    1 [op]

*/

Assignment
    = (LValue AssignmentOperator:+op Expression) : assignment ;

LValue
    = Expression allow { iden, dot_iden, array_access } ;

AssignmentOperator
    = EQU
    / STAREQU
    / DIVEQU
    / MODEQU
    / PLUSEQU
    / MINUSEQU
    / SLEQU
    / SREQU
    / BSREQU
    / ANDEQU
    / HATEQU
    / OREQU
    ;

// NOTE: first must be reference type or primitive type
//       further allowed only w/ reference type and must be class types

CastExpression
    = ( '(' (Type :# types) ,+ AND ')' Expression ) : cast ;

StatementExpression
    = Expression allow { assign, binc, bdec, ainc, adec, mcall, tmcall, ccall } ;